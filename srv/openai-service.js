const OpenAI = require('openai');
require('dotenv').config();

/**
 * Mock OpenAI Service for testing and fallback scenarios
 */
class MockOpenAIService {
    constructor() {
        console.log('🎭 Using Mock OpenAI Service');
    }

    async generateCompletion(prompt, options = {}) {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 500));

        return `Mock response for: "${prompt.substring(0, 50)}..."\n\nThis is a simulated response from the mock OpenAI service. In a real implementation, this would be generated by OpenAI's GPT model based on your prompt.`;
    }

    async generateOnboardingContent(internData) {
        await new Promise(resolve => setTimeout(resolve, 800));

        return `Welcome to the team, ${internData.firstName} ${internData.lastName}!

We're thrilled to have you join our ${internData.department} department starting ${internData.startDate}.

Here's what you can expect in your first week:
• Complete orientation and safety training
• Meet your team members and direct supervisor
• Set up your workspace and access to necessary systems
• Review your initial project assignments
• Attend department overview sessions

Your journey with us starts now, and we're here to support you every step of the way. Don't hesitate to reach out to your mentor or HR team if you have any questions.

Looking forward to seeing the great contributions you'll make to our team!

Best regards,
The ${internData.department} Team`;
    }

    async generateTaskDescription(taskData) {
        await new Promise(resolve => setTimeout(resolve, 600));

        return `Task: ${taskData.title}

Objective:
Create comprehensive documentation for our REST API endpoints to improve developer experience and system maintainability.

Step-by-step Approach:
1. Review existing API endpoints and their functionality
2. Document request/response formats for each endpoint
3. Include authentication requirements and error handling
4. Create usage examples and code snippets
5. Test all documented examples for accuracy

Expected Deliverables:
• Complete API documentation in Markdown format
• Interactive API testing interface (optional)
• Code examples in multiple programming languages
• Error handling guide and troubleshooting section

Success Criteria:
• All endpoints are documented with clear descriptions
• Examples are tested and functional
• Documentation follows company standards
• Peer review completed and approved

Estimated Duration: ${taskData.estimatedHours} hours
Priority: ${taskData.priority}

This task will help you understand our system architecture while contributing valuable documentation for the development team.`;
    }

    async generateProgressFeedback(progressData) {
        await new Promise(resolve => setTimeout(resolve, 700));

        return `Progress Feedback for ${progressData.internName}

🎉 Achievements:
You've successfully completed ${progressData.completedTasks} out of ${progressData.totalTasks} assigned tasks. This shows excellent progress and dedication to your role.

📈 Areas of Strength:
• Consistent task completion
• Good communication with team members
• Proactive approach to learning

🎯 Areas for Growth:
• Consider asking more questions during complex tasks
• Document your learning process for future reference
• Engage more in team discussions and meetings

💡 Suggestions for Continued Growth:
• Set up regular check-ins with your mentor
• Join relevant professional development sessions
• Consider taking on a small leadership role in upcoming projects

Keep up the excellent work! Your progress shows great potential for success in your career.`;
    }

    async generateFAQResponse(question, context = '') {
        await new Promise(resolve => setTimeout(resolve, 400));

        const responses = {
            'help': `If you need help with your assigned tasks, here are several resources available to you:

1. **Direct Supervisor**: Your immediate supervisor is your first point of contact for task-related questions
2. **Assigned Mentor**: Every intern has a designated mentor for guidance and support
3. **Help Desk**: For technical issues, contact our IT help desk at helpdesk@company.com
4. **HR Team**: For general questions about policies, benefits, or workplace concerns
5. **Peer Network**: Don't hesitate to ask fellow interns or team members

${context ? `Additional context: ${context}` : ''}

Remember, asking questions is encouraged and shows initiative in your learning process!`,

            'default': `Thank you for your question: "${question}"

This is a mock response. In a real implementation, our AI system would provide a comprehensive answer based on company policies, procedures, and best practices.

${context ? `Based on the context provided: ${context}` : ''}

For immediate assistance, please contact your supervisor or HR representative.`
        };

        const key = question.toLowerCase().includes('help') ? 'help' : 'default';
        return responses[key];
    }

    async generateLearningRecommendations(internProfile) {
        await new Promise(resolve => setTimeout(resolve, 900));

        return `Personalized Learning Recommendations for ${internProfile.firstName} ${internProfile.lastName}

Based on your profile in ${internProfile.department}, here are tailored recommendations:

📚 Recommended Courses:
• Advanced ${internProfile.department} Fundamentals
• Project Management for Technical Professionals
• Communication Skills for Engineers
• Industry-Specific Certifications

📖 Suggested Reading:
• "Clean Code" by Robert C. Martin
• "The Pragmatic Programmer" by Hunt & Thomas
• Industry publications and technical blogs

🛠️ Project Ideas:
• Contribute to open-source projects in your field
• Build a personal portfolio showcasing your skills
• Participate in hackathons or coding challenges

🎯 Skills to Develop:
• Technical writing and documentation
• Cross-functional collaboration
• Problem-solving methodologies
• Leadership and mentoring abilities

🤝 Networking Opportunities:
• Join professional associations in your field
• Attend industry conferences and meetups
• Connect with alumni from your university
• Participate in company mentorship programs

These recommendations are tailored to help you grow in your current role while preparing for future career opportunities.`;
    }

    async chatWithAssistant(message, conversationHistory = [], userContext = {}) {
        await new Promise(resolve => setTimeout(resolve, 800));

        const userName = userContext.firstName || 'there';
        const userDept = userContext.department || 'your department';

        // Simple keyword-based responses for demo
        const lowerMessage = message.toLowerCase();

        if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
            return `Hello ${userName}! 👋 I'm your AI onboarding assistant. I'm here to help you with any questions about your role in ${userDept}, learning resources, tasks, or company policies. What can I help you with today?`;
        }

        if (lowerMessage.includes('task') || lowerMessage.includes('assignment')) {
            return `I'd be happy to help with your tasks! 📋 Based on your current assignments, I recommend:

• Break down complex tasks into smaller, manageable steps
• Set up regular check-ins with your supervisor
• Use project management tools to track progress
• Don't hesitate to ask questions when you're stuck

Is there a specific task you'd like help with?`;
        }

        if (lowerMessage.includes('learn') || lowerMessage.includes('training') || lowerMessage.includes('course')) {
            return `Great question about learning! 🎓 For someone in ${userDept}, I recommend:

• Start with foundational courses in your field
• Focus on both technical and soft skills
• Join internal training sessions and workshops
• Connect with mentors and experienced colleagues
• Practice hands-on projects to reinforce learning

Would you like specific course recommendations for your role?`;
        }

        if (lowerMessage.includes('policy') || lowerMessage.includes('rule') || lowerMessage.includes('guideline')) {
            return `I can help with company policies! 📚 Here are some key resources:

• Employee Handbook - comprehensive policy guide
• Code of Conduct - behavioral expectations
• IT Security Policies - data protection guidelines
• HR Policies - benefits, leave, and procedures

You can access all policies through the company portal. Is there a specific policy you'd like to know about?`;
        }

        if (lowerMessage.includes('help') || lowerMessage.includes('support')) {
            return `I'm here to support you! 🤝 Here are ways to get help:

• **Me**: Ask any onboarding or work-related questions
• **Your Supervisor**: Direct task and role guidance
• **HR Team**: Policy, benefits, and workplace questions
• **IT Help Desk**: Technical support and system access
• **Mentor**: Career guidance and professional development

What specific area would you like help with?`;
        }

        // Default response
        return `Thanks for your question about "${message}".

I'm here to help with your onboarding journey in ${userDept}! I can assist with:

🎯 **Task guidance** - Help with assignments and projects
📚 **Learning resources** - Course recommendations and training
📋 **Company policies** - Rules, procedures, and guidelines
🤝 **General support** - Any other onboarding questions

Feel free to ask me anything specific, and I'll do my best to help you succeed in your new role!`;
    }
}

class OpenAIService {
    constructor() {
        if (!process.env.OPENAI_API_KEY) {
            console.warn('⚠️  OPENAI_API_KEY not found, using mock service');
            this.useMock = true;
            this.mockService = new MockOpenAIService();
            return;
        }

        // For development, we'll use the provided API key even if it doesn't start with 'sk-'
        console.log('🔑 OpenAI API key found, initializing real service...');
        this.useMock = false;

        try {
            this.openai = new OpenAI({
                apiKey: process.env.OPENAI_API_KEY,
            });
            this.useMock = false;
            console.log('✅ OpenAI client initialized successfully');
        } catch (error) {
            console.error('❌ Failed to initialize OpenAI client:', error.message);
            console.warn('⚠️ Falling back to mock service');
            this.useMock = true;
            this.mockService = new MockOpenAIService();
        }
    }

    /**
     * Generate a completion using OpenAI's chat API or mock service
     * @param {string} prompt - The prompt to send to OpenAI
     * @param {Object} options - Additional options for the API call
     * @returns {Promise<string>} - The generated response
     */
    async generateCompletion(prompt, options = {}) {
        // Use mock service if API key is invalid or client failed to initialize
        if (this.useMock) {
            return await this.mockService.generateCompletion(prompt, options);
        }

        try {
            const {
                model = 'gpt-3.5-turbo',
                maxTokens = 1000,
                temperature = 0.7,
                systemMessage = 'You are a helpful assistant for an intern onboarding system.'
            } = options;

            const messages = [
                { role: 'system', content: systemMessage },
                { role: 'user', content: prompt }
            ];

            const completion = await this.openai.chat.completions.create({
                model,
                messages,
                max_tokens: maxTokens,
                temperature,
            });

            return completion.choices[0].message.content.trim();
        } catch (error) {
            console.error('OpenAI API Error:', error);
            console.warn('⚠️  Falling back to mock service due to API error');
            // Fallback to mock service on API error
            if (!this.mockService) {
                this.mockService = new MockOpenAIService();
            }
            return await this.mockService.generateCompletion(prompt, options);
        }
    }

    /**
     * Generate personalized onboarding content for an intern
     * @param {Object} internData - Intern information
     * @returns {Promise<string>} - Personalized onboarding content
     */
    async generateOnboardingContent(internData) {
        if (this.useMock) {
            return await this.mockService.generateOnboardingContent(internData);
        }

        const prompt = `
        Generate a personalized onboarding welcome message for a new intern with the following details:
        - Name: ${internData.firstName} ${internData.lastName}
        - Department: ${internData.department}
        - Start Date: ${internData.startDate}
        - Email: ${internData.email}

        The message should be professional, welcoming, and include:
        1. A warm welcome
        2. Key information about their department
        3. What to expect in their first week
        4. Encouragement and support

        Keep it concise but informative (around 200-300 words).
        `;

        return await this.generateCompletion(prompt, {
            systemMessage: 'You are an HR assistant helping create personalized onboarding content for new interns.',
            temperature: 0.8
        });
    }

    /**
     * Generate task descriptions based on intern's department and level
     * @param {Object} taskData - Task information
     * @returns {Promise<string>} - Generated task description
     */
    async generateTaskDescription(taskData) {
        if (this.useMock) {
            return await this.mockService.generateTaskDescription(taskData);
        }

        const prompt = `
        Create a detailed task description for an intern task with the following information:
        - Task Title: ${taskData.title}
        - Department: ${taskData.department}
        - Priority: ${taskData.priority}
        - Estimated Duration: ${taskData.estimatedHours} hours

        The description should include:
        1. Clear objectives
        2. Step-by-step approach
        3. Expected deliverables
        4. Success criteria

        Make it suitable for an intern level and educational.
        `;

        return await this.generateCompletion(prompt, {
            systemMessage: 'You are a mentor creating educational task descriptions for interns.',
            temperature: 0.6
        });
    }

    /**
     * Generate feedback and suggestions for intern progress
     * @param {Object} progressData - Progress information
     * @returns {Promise<string>} - Generated feedback
     */
    async generateProgressFeedback(progressData) {
        if (this.useMock) {
            return await this.mockService.generateProgressFeedback(progressData);
        }

        const prompt = `
        Generate constructive feedback for an intern based on their progress:
        - Intern Name: ${progressData.internName}
        - Completed Tasks: ${progressData.completedTasks}
        - Total Tasks: ${progressData.totalTasks}
        - Current Status: ${progressData.status}
        - Areas of Focus: ${progressData.focusAreas || 'General development'}

        Provide:
        1. Recognition of achievements
        2. Areas for improvement
        3. Specific suggestions for growth
        4. Encouragement for continued progress

        Keep it positive and constructive.
        `;

        return await this.generateCompletion(prompt, {
            systemMessage: 'You are a supportive mentor providing constructive feedback to interns.',
            temperature: 0.7
        });
    }

    /**
     * Generate FAQ responses for common intern questions
     * @param {string} question - The question to answer
     * @param {string} context - Additional context about the organization
     * @returns {Promise<string>} - Generated answer
     */
    async generateFAQResponse(question, context = '') {
        if (this.useMock) {
            return await this.mockService.generateFAQResponse(question, context);
        }

        const prompt = `
        Answer this common intern question in a helpful and informative way:
        Question: ${question}

        ${context ? `Additional context: ${context}` : ''}

        Provide a clear, concise, and helpful answer that would be appropriate for a new intern.
        `;

        return await this.generateCompletion(prompt, {
            systemMessage: 'You are an HR representative answering common questions from interns.',
            temperature: 0.5
        });
    }

    /**
     * Generate learning recommendations based on intern's department and interests
     * @param {Object} internProfile - Intern profile information
     * @returns {Promise<string>} - Learning recommendations
     */
    async generateLearningRecommendations(internProfile) {
        if (this.useMock) {
            return await this.mockService.generateLearningRecommendations(internProfile);
        }

        const prompt = `
        Generate personalized learning recommendations for an intern:
        - Name: ${internProfile.firstName} ${internProfile.lastName}
        - Department: ${internProfile.department}
        - Interests: ${internProfile.interests || 'Not specified'}
        - Current Skills: ${internProfile.skills || 'Not specified'}
        - Career Goals: ${internProfile.careerGoals || 'Not specified'}

        Suggest:
        1. Relevant courses or certifications
        2. Books or resources
        3. Projects to work on
        4. Skills to develop
        5. Networking opportunities

        Make recommendations specific to their department and career aspirations.
        `;

        return await this.generateCompletion(prompt, {
            systemMessage: 'You are a career development advisor providing learning recommendations for interns.',
            temperature: 0.8
        });
    }

    /**
     * Chatbot conversation method for real-time chat
     */
    async chatWithAssistant(message, conversationHistory = [], userContext = {}) {
        if (this.useMock) {
            return await this.mockService.chatWithAssistant(message, conversationHistory, userContext);
        }

        try {
            // Build conversation context
            const systemMessage = {
                role: "system",
                content: `You are an AI assistant for an employee onboarding system. You help interns and new employees with:
                - Learning and development questions
                - Task assistance and guidance
                - Company policy clarifications
                - Career development advice
                - Technical support for onboarding processes

                User context:
                - Name: ${userContext.firstName || 'User'} ${userContext.lastName || ''}
                - Department: ${userContext.department || 'Not specified'}
                - Role: ${userContext.role || 'Employee'}

                Be helpful, professional, and encouraging. Provide specific, actionable advice when possible.`
            };

            // Prepare messages array
            const messages = [systemMessage];

            // Add conversation history (last 10 messages to stay within token limits)
            const recentHistory = conversationHistory.slice(-10);
            messages.push(...recentHistory);

            // Add current message
            messages.push({ role: "user", content: message });

            const completion = await this.openai.chat.completions.create({
                model: "gpt-3.5-turbo",
                messages: messages,
                max_tokens: 500,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            });

            return completion.choices[0].message.content;
        } catch (error) {
            console.error('❌ Error in chat conversation:', error);
            // Fallback to mock service
            return await this.mockService.chatWithAssistant(message, conversationHistory, userContext);
        }
    }
}

module.exports = OpenAIService;
